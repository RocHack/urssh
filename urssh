#!/usr/bin/env bash

username="$USER"
format="%u@%m"

verbose=false
quiet=false
action=ssh
fast=true
each=false

for arg; do
    case "$arg" in
        (--verbose|-v)
            verbose=true
            quiet=false
            ;;

        (--quiet|-q)
            verbose=false
            quiet=true
            ;;

        (--list|-l)
            action=list
            ;;

        (--ssh|-s)
            action=ssh
            ;;

        (--fast|-f)
            fast=true
            ;;

        (--each|-e)
            each=true
            ;;

        (--all|-a)
            fast=false
            ;;

        (--user=*|--username=*)
            username="$(awk -F= '{print $2}' <<< "$arg")"
            ;;

        (--format=*)
            format="$(awk -F= '{print $2}' <<< "$arg")"
            ;;

        (*)
            echo "error: unrecognized argument: $arg" >&2
            exit 1
            ;;
    esac
done

sub()
{
    echo 's/\([^%]\|^\)'"$1"'/\1'"$2"'/g'
}

format_machine()
{
    local user machine_short machine_long

    user="$(awk -F@ '{print $1}' <<< "$1")"
    machine_long="$(awk -F@ '{print $2}' <<< "$1")"
    machine_short="$(awk -F. '{print $1}' <<< "$machine_long")"

    sed "
        $(sub "%m" "$machine_short")
        $(sub "%M" "$machine_long")
        $(sub "%u" "$user")
        s/%%/%/g
    " <<< "$format"
}

format_machines()
{
    local machine

    while read -r machine; do
        format_machine "$machine"
    done
}

get_machines()
{
    for i in $(seq 3); do
        echo "$username@cycle${i}.csug.rochester.edu"
    done

    if echo "$HOSTNAME" | grep -qF cycle; then
        minors="colvin iroquois haystack hough gothics cliff armstrong skylight marshall redfield wright algonquin panther whiteface"
        majors="tabletop blake macomb cascade phelps colden porter marcy seward nye sawteeth"
        for i in $majors $minors; do
            echo "$username@${i}.csug.rochester.edu"
        done
    fi
}

get_formated_machines()
{
    get_machines | format_machines
}

get_users()
{
    users | tr ' ' '\n'
}

uniq_users()
{
    get_users | sort | uniq
}

n_users()
{
    get_users | wc -l
}

n_uniq_users()
{
    uniq_users | wc -l
}

meminfo()
{
    awk -F':? +' "\$1 == \"$1\" {print \$2}" /proc/meminfo
}

mem_avail()
{
    meminfo MemAvailable
}

cpuinfo()
{
    lscpu | awk -F': +' "\$1 == \"$1\" {print \$2}"
}

n_cpus()
{
    cpuinfo "CPU(s)"
}

load_avgs()
{
    uptime | awk -F'[,:] ' '{print $NF, $(NF - 1), $(NF - 2)}'
}

load_avgs_avg()
{
    bc -l <<< "($(load_avgs | sed 's/ /+/g')) / 3"
}

get_rating()
{
    bc -l <<EOF
n_uniq_users  = $(n_uniq_users)
load_avgs_avg = $(load_avgs_avg)
n_cpus        = $(n_cpus)
mem_avail     = $(mem_avail)

(n_uniq_users + 1) * (load_avgs_avg + 1) / (n_cpus * \
   (mem_avail / 1048576))
EOF
}

func_cat()
{
    local str=

    for arg; do
        str="$(cat <(echo "$str") <(type "$arg" | tail -n +2))"
    done

    echo "$str"
}

funcs="$(func_cat get_users uniq_users n_users n_uniq_users meminfo mem_avail \
    cpuinfo n_cpus load_avgs load_avgs_avg get_rating)"

do_ssh()
{
    machine="$1"

    if ! ssh "$machine" true 2>/dev/null; then
        $quiet || echo "Unable to ssh into $(format_machine "$machine")" >&2
        return 1
    fi

    cmd="$(cat <(echo "$funcs") <(echo "$2"))"

    ! $verbose || echo "MACHINE: $machine" >&2
    ! $verbose || echo "COMMAND: $2" >&2

    ssh "$machine" "$cmd"
}

wait_for_children()
{
    if $fast; then
        sleep 5
        pkill -P $$
    else
        wait
    fi
}

machines="$(get_machines)"

case "$action" in
    (ssh)
        if $each; then
            for machine in $machines; do
                $quiet || echo \
                    "sshing into $(format_machine "$machine")"
                do_ssh "$machine" ". ~/.bashrc"
            done
        else
            tmpdir="$(mktemp -d)"
            for machine in $machines; do
                do_ssh "$machine" get_rating >"$tmpdir/$machine" &
            done
            wait_for_children
            min=1000
            minmachine=
            for machine in $machines; do
                rating="$(cat "$tmpdir/$machine")"
                if [ -n "$rating" ] && [ "$(bc <<< "$rating < $min")" = 1 ]
                then
                    min="$rating"
                    minmachine="$machine"
                fi
            done
            exec ssh "$minmachine"
        fi
        ;;

    (list)
        tmpdir="$(mktemp -d)"
        for machine in $machines; do
            do_ssh "$machine" 'echo $(n_uniq_users) $(uniq_users)' \
                >"$tmpdir/$machine" &
        done
        wait_for_children
        for machine in $machines; do
            info="$(cat "$tmpdir/$machine")"
            [ -n "$info" ] && echo "$(format_machine "$machine") $info"
        done
        ;;

    (*)
        echo 'error: unknown action' >&2
        exit 1
esac
